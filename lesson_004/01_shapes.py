# -*- coding: utf-8 -*-

import simple_draw as sd
sd.resolution = (1200, 1000)

# Часть 1.
# Написать функции рисования равносторонних геометрических фигур:
# - треугольника
# - квадрата
# - пятиугольника
# - шестиугольника
# Все функции должны принимать 3 параметра:
# - точка начала рисования
# - угол наклона
# - длина стороны
#
# Использование копи-пасты - обязательно! Даже тем кто уже знает про её пагубность. Для тренировки.
# Как работает копипаста:
#   - одну функцию написали,
#   - копипастим её, меняем название, чуть подправляем код,
#   - копипастим её, меняем название, чуть подправляем код,
#   - и так далее.
# В итоге должен получиться ПОЧТИ одинаковый код в каждой функции

# Пригодятся функции
# sd.get_point()
# sd.get_vector()
# sd.line()
# Результат решения см lesson_004/results/exercise_01_shapes.jpg

# TODO здесь ваш код
x=600
y=200
def draw_figure(figure=None, point=sd.random_point(), angle=0, length=100):
    """
    :param angle: угол наклона вектора
    :type length: длина вектора
    :param point: начальная точка вектора
    :param length: длина вектора
    :return: равносторонняя фигура
    """
    point = point
    if figure == 'треугольник':
        for a in range(3):
            v1 = sd.get_vector(start_point=point, angle=angle, length=length, width=3)
            v1.draw()
            angle += 120
            point = v1.end_point

    elif figure == 'квадрат':
        for a in range(4):
            v1 = sd.get_vector(start_point=point, angle=angle, length=length, width=3)
            v1.draw()
            angle += 90
            point = v1.end_point

    elif figure == 'шестиугольник':
        for a in range(6):
            v1 = sd.get_vector(start_point=point, angle=angle, length=length, width=3)
            v1.draw()
            angle += 60
            point = v1.end_point

    elif figure == 'пятиугольник':
        for a in range(5):
            v1 = sd.get_vector(start_point=point, angle=angle, length=length, width=3)
            v1.draw()
            angle += 72
            point = v1.end_point
    else:
        print("Укажите фигуру и попробуйте еще раз")


figure_list = ['треугольник', 'квадрат', 'пятиугольник', 'шестиугольник', '']

for fig in figure_list:
    draw_figure(point=sd.random_point(), angle=0, length=100, figure=fig)



# Часть 1-бис.
# Попробуйте прикинуть обьем работы, если нужно будет внести изменения в этот код.
# Скажем, связывать точки не линиями, а дугами. Или двойными линиями. Или рисовать круги в угловых точках. Или...
# А если таких функций не 4, а 44?

# Часть 2 (делается после зачета первой части)
#
# Надо сформировать функцию, параметризированную в местах где была "небольшая правка".
# Это называется "Выделить общую часть алгоритма в отдельную функцию"
# Потом надо изменить функции рисования конкретных фигур - вызывать общую функцию вместо "почти" одинакового кода.
#
# В итоге должно получиться:
#   - одна общая функция со множеством параметров,
#   - все функции отрисовки треугольника/квадрата/етс берут 3 параметра и внутри себя ВЫЗЫВАЮТ общую функцию.
#
# Не забудте в этой общей функции придумать, как устранить разрыв
#   в начальной/конечной точках рисуемой фигуры (если он есть)

# Часть 2-бис.
# А теперь - сколько надо работы что бы внести изменения в код? Выгода на лицо :)
# Поэтому среди программистов есть принцип D.R.Y. https://clck.ru/GEsA9
# Будьте ленивыми, не используйте копи-пасту!


sd.pause()
